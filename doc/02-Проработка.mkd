Цели и задачи
=============

Основная цель создания этой игры - научиться работать с игровым движком Unity3D для того, чтобы впоследствии приступить к выполнению более сложного проекта.

В связи с этим и с оглядкой на будущий проект, игра должна быть очень простой и быстрой в изготовлении. Но при этом в ней должны затрагиваться определенные ключевые технологии движка.

В частности, в первоначальном описании геймплея предлагалось использовать изометрическую проекцию, вид сверху на уровень, практически 2D. С учетом специфики движка (он 3D), а также оглядываясь на следующий основной проект, выбираем полное 3D с видом от третьего лица.

Также в процессе работой над этой игрой будут освоены и опробованы принципы, а, возможно, и написаны общие классы для реализации динамического создания игровой обстановки на основе описания уровня.

-------------------------------

Организация уровней
===================

Уровней в игре должно быть в перспективе много, иначе будет не интересно. Так как игра пилотная и должна быть максимально легкой в изготовлении, то составление уровней должно происходить без применения каких-либо дополнительных инструментов. В идеале, описание (создание) уровня должно происходить в "блокноте".

Значит, уровень должен описываться простым текстовым файлом. Логично предположить, что уровень в такой ситуации должен быть прямоугольным и плоским.

Для описания уровня идеально подошел бы модифицированный формат XPM. В этом случае рисовать уровни можно было бы даже в графическом редакторе, после чего экспортировать уровень в XPM, немного доработать его руками и использовать в игре.

Пример файла изображения в формате XPM:

<center>![Формат XPM](images/XPM.png "Формат XPM")</center>
<center>Рис. 1 - Формат XPM</center>

В приведенном примере файла четко видна черная единица (цвет '**#000000**', обозначенный символом '**%**') на белом фоне (цвет '**#FFFFFF**', обозначенный символом '**.**'). Прозрачного фона нет (пробелом ничего не обозначено), также имеются некоторые промежуточные градации серого (все три компонента у остальных цветов одинаковые).

Также из описания файла видно, что картинка имеет разрешение 16x16 пикселов, использует палитру из 10 цветов, и каждый цвет обозначен одним символом (так расшифровывается строка **"16 16 10 1"**.

Этот формат для описания уровня можно использовать без изменений (для упрощения процесса создания уровней), заменив лишь идентификаторы цветов (вроде #FFFFFF) на какие-то другие идентификаторы, понятные игре. Например, на такие: #space, #wall, #cat, #dog, #start, #WC, и т.п., а также заменив **/\* XPM \*/** на **/\* GAMELEVEL \*/**. Кроме того, в дальнейшем развитии, можно ввести суффиксы у идентификаторов: **$N**, **$W**, **$E**, **$S**, обозначающие ориентацию объекта по сторонам света (имеется ввиду, что север всегда сверху уровня). Тогда полный идентификатор будет выглядеть как, например, **#start$S**, что будет означать начальную позицию игрока, развернутую лицом на юг. Либо, при дальнейшем развитии движка буквы N, W, E и S вообще можно заменять на цифры, означающие градус поворота.

Как будет показано дальше, при разработке Архитектуры, возникает необходимость введения необязательных индексов, показывающих принадлежность нескольких рядом стоящих ячеек к одному единому объекту. Индексы будем отделять символом косой черты "**\\**".

И вот теперь полный идентификатор объекта будет уже выглядеть так: **#cabinet1$W\3**. Наряду со шкафом №3 модели "1", расположенного лицевой стороной на запад, может существовать еще и шкаф №2 такой же модели "1" и тоже обращенный на запад: **#cabinet1$W\2**, но занимающий другие ячейки на игровом уровне.

Необходимо будет в коде игры создать класс для парсинга таких файлов, и чтобы этот класс умел динамически создавать игровое окружение.

-----------------

Управление
==========

Пусть игровой персонаж управляется с клавиатуры клавишами WASD и курсорными стрелками. Мышь задействуем для навигации по меню GUI, а также для тряски фонарика.

----------------

Графика
=======

На начальной стадии реализации игры все игровые объекты будем изображать в виде различной высоты кубов с натянутыми на их грани текстурами, изображающими препятствия.

Игрок пусть отображается цилиндром, пустые клетки - прямоугольником (или очень низким кубом) с текстурой пола.

Стены нужно наделять непроходимостью, а остальные объекты (препятствия) - по логике вещей.

