Классы
======

Код должен писаться на C# с применением классов (а иначе на C# и не получится).

Вот, какие классы потребуются:

- интерфейсный класс игрового движка;
- класс основной (игровой) логики;
- парсер файла, описывающего уровни;
- класс уровня;
- класс игрока;
- абстрактный класс объекта уровня;
- конкретные классы каждого из объектов уровня;
- фабрика объектов;
- абстрактный класс эффекта;
- конкретные классы эффектов;
- фабрика эффектов.

Объект уровня описывает единичную ячейку уровня. Эффект определяет визуальное и/или звуковое событие.

-----------------------

## Интерфейсный класс игрового движка #################################

Инкапсулирует всю специфику работы с игровым движком таким образом, что остальные классы не имеют ни малейшего понятия о том, в какой среде, на каком оборудовании и в каком игровом движке происходит их функционирование.

Этот класс получает и обрабатывает события контроллеров управления (клавиатура, мышь и т.п.) и передает эти события классу игровой логики.

Получая сигналы от класса игровой логики транслирует их в вызовы игрового движка, например, события воспроизведения звуков, визуальных эффектов, создания объектов на игровой сцене в движке, и проч.

Таким образом, этот класс взаимодействует только с классом игровой логики.
Классу игровой логики этот класс предоставляет следующие публичные методы:

- воспроизведение звука;
- подготовка пространства для игрового уровня с указанием размеров игрового уровня;
- создание игрового объекта в координатах игрового уровня;

----------------------

## Класс основной (игровой) логики ####################################

Его особенность заключается в общем контроле за развитием игры. При этом он не должен касаться каких-либо особенностей игрового движка.
Этот класс должен содержать следующие публичные методы:

- загрузка уровня из файла;
- запуск уровня;
- приостановка игры;
- возобновление игры;
- остановка игры;
- сохранение игрового процесса в файл;
- загрузка ранее сохраненного игрового процесса из файла;
- предоставление сведений об игровой статистике;
- получение событий управления игровым персонажем.


-----------------------

## Парсер файла, описывающего уровни #################################

Логика работы:

1. Разбиваем весь файл на строки.
2. Удаляем строку, содержащую /\* GAMELEVEL \*/ (слово GAMELEVEL - вместо XPM). Проверяем, что это самая первая строка в файле.
3. Следующая строка должна начинаться на **static char * ** и заканчиваться символами **_xpm[] = {**. Все, что между этими символами - название уровня. Удаляем строку.
4. Со всех остальных строк снимаем:
    - первый символ, который должен быть двойной кавычкой;
    - проверяем последний символ. Если это **"};** - значит эту строку считаем последней и после нее прекращаем обработку. Удаляем эту последовательность символов;
    - иначе последними символами должны являться **",**. Если это так - удаляем их.
5. Первая из оставшихся строк - четыре числа, разделенные пробелом. Получаем **ширину**, **высоту**, **количество цветов**, **количество символов в цвете**. Проверяем, что количество символов в цвете == 1. Удаляем строку.
6. Проверяем, что **высота** равна количеству оставшихся строк.
7. По следующим **количество цветов** строк составляем словарь:
    - первый символ - **код цвета**, дальше **разделитель** (символ табуляции, "c", пробел) и **описание**. Удаляем строку.
8. Оставшиеся строки представляют собой сам уровень.
    - организуем цикл по всем строкам **высота**;
    - цикл по всем столбцам **ширина**;
    - берем символ [строка][столбец] и сохраняем его во внутренний массив;
    - удаляем строку.
9. Если парсер на каком-либо из шагов алгоритма обнаружил ошибку, внутренний массив обнуляется, и размеры **ширина** и **высота** устанавливаются в ноль.
10. По требованию извне (публичный метод) по указанной ячейке [строка][столбец] выдаем соответствующее хранимому символу с этими координатами **описание** текстовой строкой.
11. По требованию извне (публичный метод) предоставляется результат проверки корректности парсинга уровня: (0 < **ширина** * **высота**).

----------------------

## Класс уровня #######################################################

Включает в себя экземпляр парсера и представляет из себя цельную логическую единицу - собственно игровой уровень. С этим классом непосредственно контактирует класс основной логики. Сюда, в этот класс, от основной логики поступают события от контроллера управления (от клавиатуры, мыши и проч.).

Обращаясь к парсеру уровня, в котором хранится непосредственно массив объектов, составляющих сам уровень, класс уровня создает уже массив экземпляров классов объектов, а по ним будут созданы визуальные объекты на сцене игрового движка через обращения к методам игровой логики. После того, как построен массив объектов, необходимость в парсере отпадает.

Создание двумерного массива объектов происходит на основе сопоставления **описания** из парсера и класса объекта, для чего класс уровня обращается к фабрике объектов с требованием выдать новый экземпляр объекта с соответствующим описанием. Если фабрика не располагает информацией о таком объекте, то класс уровня принимает решение о замене несуществующего элемента на ячейку пустого места (с выводом ошибки в лог).

Имеется одна неприятная особенность построения массива объектов на основе массива описаний из парсера. Она заключается в том, что для простоты создания уровней выбирается прямоугольный массив фиксированного размера, в котором определен минимальный размер ячейки игрового поля. Однако на игровом поле могут располагаться не только маленькие квадратные объекты, соответствующие одной ячейке, но и более массивные, например, шкаф может занимать сразу несколько ячеек.
Как быть в таком случае?

В этом случае нужно в файле описания уровня пометить все ячейки, относящиеся к шкафу, одним и тем же описателем шкафа, с одинаковым суффиксом. И при разборе описателей, полученных от парсера, класс уровня должен вначале объединить все подобные ячейки в одно целое, и лишь для этого единого целого создать один единственный объект получившихся габаритов.

Но не все объекты должны таким образом объединяться в один целый. Например, свободное пространство не должно. В этом случае нужно как-то различать, когда разрозненные ячейки представляют одно целое, а когда - разные объекты. И лучше всего делать это не на основе каких-то умозаключений в процессе разбора описателей, а отдать это на откуп человеку, который будет составлять уровень игры.
Тогда вся необходимая информация об объединении ячеек в один объект может содержаться лишь в описателе объектов. Значит нужно в описатель ввести еще одно необязательное поле - индекс (соответствующие правки внесены в документ Проработка).

После создания всех объектов, класс уровня проверяет, чтобы каждый уровень содержал единственную точку начала игры (вход) и хотя бы одну точку выхода. Уровень может содержать несколько выходов (туалетов), но вход должен быть только один.

После создания объекты уровня живут своей жизнью. Часы на стене могут тикать и куковать, собака может храпеть, а кошка периодически мурлыкать. По желанию, в дальнейшем можно доработать объекты возможностью самостоятельно перемещаться по уровню.

После инициализации объектов происходит запуск игры - помещение в точку начала игрока, и дальше экземпляру класса игрока уже могут передаваться события перемещения.

Если игрок достигает точки выхода, то класс уровня уведомляет об этом класс основной логики.

----------------------

## Класс игрока ########################################################

Представляет хранилище всех свойств, ассоциированных с игроком, а также реализацию всех его интерфейсов.

Свойства игрока:

- общее количество проведенного в игре времени;
- общее количество сделанных в игре шагов;
- лучший результат по этому уровню за все игры (шаги и оставшееся время);
- оставшееся количество времени до конца текущего уровня;
- количество шагов, проделанное в этом уровне в текущей игре;
- текущие координаты на уровне (ячейка: строка, столбец; азимут направления взгляда: куда будет сделан следующий шаг).


Интерфейсы игрока:

- состояние;
- перемещение по уровню;
- зрение;
- подсветка уровня.

### Интерфейс *Состояние* ##########
Содержит методы для получения и установки свойств игрока, действительных лишь для текущей сессии игры: 

- оставшееся количество времени до конца текущего уровня;
- количество шагов, проделанное в этом уровне в текущей игре;
- текущие координаты на уровне (ячейка: строка, столбец; азимут направления взгляда: куда будет сделан следующий шаг).

### Интерфейс *Перемещение игрока по уровню* ##########
Отвечает за перемещение игрового персонажа по уровню игры. 
Включает следующие методы:

- поворот влево ** *turnLeft()* **;
- поворот вправо ** *turnRight()* **;
- шаг вперед ** *move()* **;
- шаг назад ** *stepBack()* **.

### Интерфейс *Зрение* ###############
Отвечает за то, как будет отображаться игроку игровой уровень.
Включает следующие методы:

- нормальный режим;
- режим тряски.

### Интерфейс *Подсветка* ############
Отвечает за местное освещение, ассоциированное с игроком.
Включает следующие методы:

- нормальный режим;
- "китайский фонарик".


--------------------------------------------------------

## Абстрактный класс объекта уровня ####################################
Описывает обобщенную единицу, на основании информации о которой будет создана ячейка игрового уровня.

Должен содержать следующие свойства:

- **имя**. Уникальное имя объекта в пределах игрового уровня;
- **координаты**. Положение объекта на игровом уровне в координатах игрового уровня. Указываются координаты левого верхнего угла объекта;
- **описание**. Текстовая строка, соответствующая аналогичной из файла описания уровня, но без суффикса и индекса;
- **ориентация**. Азимут поворота объекта. Определяется суффиксом из описания в файле уровня;
- **проходимость**. Признак того, является ли ячейка безусловным препятствием на пути игрока (грубо: стена - не стена);
- **пенальти**. Количество очков, отнимаемые у игрока за посещение данной ячейки (не актуально для классов, у которых **проходимость** == false);
- **эффекты**. Словарь ссылок на объекты эффектов. Объект может не иметь ни одного эффекта, например, пустое пространство. Хотя, даже пустое пространство может иметь эффект "звук шагов". Эффекты срабатывают либо в случае попытки входа игрока на объект, и в этом случае запуск эффекта на воспроизведение происходит из метода "попытка входа игрока". Либо эффект может быть воспроизведен по какому-либо другому событию, например, периодический храп собаки, или звуки от настенных часов.

Класс имеет статические (единые, глобальные для всех экземпляров класса) ссылки на:

- класс игровой логики;
- интерфейс игрока "*Состояние*";
- интерфейс игрока "*Перемещение игрока по уровню*".

Также должны быть реализованы следующие общие методы:

- регистрация объекта в фабрике. Каждый из классов наследников должен вызывать этот метод для того, чтобы фабрика объектов узнала о новом объекте, описываемым этим классом;

- регистрация эффекта с указанием имени, под которым этот эффект будет известен в пределах объекта.

Виртуальные методы:

- воспроизведение эффекта;

- попытка входа игрока (с указанием ячейки "откуда происходит движение"). Этот метод срабатывает тогда, когда игрок пытается войти в зону действия данного объекта. Это можно сделать только шагнув вперед или назад. Класс основной логики отслеживает события управления игровым персонажем, а класс уровня определяет объект, находящийся на пути игрового персонажа и передает управление этому методу. В этом методе определяется дальнейшее событие:
    - если **ориентация** объекта совместно с **проходимостью** допускают вход в него с ячейки "откуда происходит движение", то происходит обновление координат игрока (через интерфейс "*Перемещение игрока по уровню*"), а также через интерфейс "*Состояние*" обновление количества пройденных шагов и модификация оставшегося количества времени у игрока с учетом параметра **пенальти**;
    - если войти на этот объект нельзя, то состояние игрока также модифицируется. Как именно - зависит от реализации объекта;


--------------------------------------------------------

## Абстрактный класс эффекта ####################################
Описывает некое поведение объекта игрового уровня при наступлении определенных событий. 

Эффект должен обладать следующими виртуальными методами:

- получить имя эффекта. Будет возвращено уникальное имя эффекта, под которым этот эффект будет найден в фабрике эффектов;
- воспроизведение. Основной метод, который приводит эффект к его действию.

Также эффект должен обладать статической (единой, глобальной для всех экземпляров класса) ссылкой на:

- класс игровой логики. Это необходимо для вывода эффекта на уровень игрового движка.

